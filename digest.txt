Directory structure:
└── DALI/
    ├── README.md
    ├── HELP.md
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── src/
    │   ├── main/
    │   │   ├── java/
    │   │   │   └── com/
    │   │   │       └── dali/
    │   │   │           └── ecommerce/
    │   │   │               ├── DaliApplication.java
    │   │   │               ├── config/
    │   │   │               │   └── SecurityConfig.java
    │   │   │               ├── controller/
    │   │   │               │   ├── AccountController.java
    │   │   │               │   ├── HomeController.java
    │   │   │               │   ├── ProductController.java
    │   │   │               │   └── StoreController.java
    │   │   │               ├── model/
    │   │   │               │   ├── Account.java
    │   │   │               │   ├── Address.java
    │   │   │               │   ├── Product.java
    │   │   │               │   └── Store.java
    │   │   │               ├── repository/
    │   │   │               │   ├── AccountRepository.java
    │   │   │               │   ├── AddressRepository.java
    │   │   │               │   ├── ProductRepository.java
    │   │   │               │   └── StoreRepository.java
    │   │   │               └── service/
    │   │   │                   ├── AccountService.java
    │   │   │                   ├── AccountServiceImpl.java
    │   │   │                   └── CustomUserDetailsService.java
    │   │   └── resources/
    │   │       ├── application.properties
    │   │       ├── data.sql
    │   │       ├── schema.sql
    │   │       ├── static/
    │   │       │   ├── css/
    │   │       │   │   └── style.css
    │   │       │   └── images/
    │   │       │       └── products/
    │   │       └── templates/
    │   │           ├── home.html
    │   │           ├── login.html
    │   │           ├── product-detail.html
    │   │           ├── profile.html
    │   │           ├── register.html
    │   │           ├── shop.html
    │   │           ├── stores.html
    │   │           └── fragments/
    │   │               ├── footer.html
    │   │               ├── header.html
    │   │               ├── product-list.html
    │   │               └── store-list.html
    │   └── test/
    │       └── java/
    │           └── com/
    │               └── dali/
    │                   └── ecommerce/
    │                       └── DaliApplicationTests.java
    └── .mvn/
        └── wrapper/
            └── maven-wrapper.properties

================================================
File: README.md
================================================
# DALI E-commerce Application

This is a Spring Boot application for the DALI e-commerce site.

## Getting Started

### Prerequisites
- Java 21
- Apache Maven
- PostgreSQL

### Local Setup Instructions

1.  **Clone the repository:**
    ```bash
    git clone <your-repo-url>
    cd DALI
    ```

2.  **Set up the PostgreSQL Database:**
    - Make sure PostgreSQL is installed and running.
    - Create a database named `dali_db`.
    ```sql
    CREATE DATABASE dali_db;
    ```

3.  **Configure Environment Variables:**
    The application requires database credentials to be set as environment variables.

    - **On Windows (Command Prompt):**
      ```cmd
      set DB_PASSWORD=your_postgres_password
      ```

4.  **Run the Application:**
    You can run the application using the Maven wrapper:
    ```bash
    ./mvnw spring-boot:run
    ```
    The application will be available at `http://localhost:8080`. The database schema and initial data will be automatically loaded on the first run.


================================================
File: HELP.md
================================================
# Getting Started

### Reference Documentation

For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.3/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.5.3/maven-plugin/build-image.html)
* [Spring Data JPA](https://docs.spring.io/spring-boot/3.5.3/reference/data/sql.html#data.sql.jpa-and-spring-data)
* [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.5.3/reference/using/devtools.html)
* [Thymeleaf](https://docs.spring.io/spring-boot/3.5.3/reference/web/servlet.html#web.servlet.spring-mvc.template-engines)
* [Spring Web](https://docs.spring.io/spring-boot/3.5.3/reference/web/servlet.html)

### Guides

The following guides illustrate how to use some features concretely:

* [Accessing Data with JPA](https://spring.io/guides/gs/accessing-data-jpa/)
* [Handling Form Submission](https://spring.io/guides/gs/handling-form-submission/)
* [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/)
* [Serving Web Content with Spring MVC](https://spring.io/guides/gs/serving-web-content/)
* [Building REST services with Spring](https://spring.io/guides/tutorials/rest/)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the
parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.




================================================
File: mvnw
================================================
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"



================================================
File: mvnw.cmd
================================================
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"



================================================
File: pom.xml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.dali</groupId>
    <artifactId>DALI</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>DALI</name>
    <description>DALI</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>21</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.thymeleaf.extras</groupId>
            <artifactId>thymeleaf-extras-springsecurity6</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>



================================================
File: src/main/java/com/dali/ecommerce/DaliApplication.java
================================================
package com.dali.ecommerce;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DaliApplication {

    public static void main(String[] args) {
        SpringApplication.run(DaliApplication.class, args);
    }

}



================================================
File: src/main/java/com/dali/ecommerce/config/SecurityConfig.java
================================================
package com.dali.ecommerce.config;

import com.dali.ecommerce.service.CustomUserDetailsService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final CustomUserDetailsService customUserDetailsService;

    public SecurityConfig(CustomUserDetailsService customUserDetailsService) {
        this.customUserDetailsService = customUserDetailsService;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(customUserDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .authorizeHttpRequests(auth -> auth
                        // Add "/register" to the list of public URLs
                        .requestMatchers("/", "/register", "/shop/**", "/stores/**", "/product/**", "/css/**", "/images/**", "/login").permitAll()
                        .anyRequest().authenticated()
                )
                .formLogin(form -> form
                        .loginPage("/login")
                        .loginProcessingUrl("/login")
                        .defaultSuccessUrl("/", true)
                        .permitAll()
                )
                .logout(logout -> logout
                        .logoutUrl("/logout")
                        .logoutSuccessUrl("/")
                        .permitAll()
                );

        http.authenticationProvider(authenticationProvider());

        return http.build();
    }
}


================================================
File: src/main/java/com/dali/ecommerce/controller/AccountController.java
================================================
package com.dali.ecommerce.controller;

import com.dali.ecommerce.model.Account;
import com.dali.ecommerce.repository.AccountRepository;
import com.dali.ecommerce.service.AccountService;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
public class AccountController {

    private final AccountRepository accountRepository;
    private final AccountService accountService;

    public AccountController(AccountRepository accountRepository, AccountService accountService) {
        this.accountRepository = accountRepository;
        this.accountService = accountService;
    }

    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("account", new Account());
        return "register";
    }

    @PostMapping("/register")
    public String registerUserAccount(@ModelAttribute("account") Account account, RedirectAttributes redirectAttributes) {
        try {
            accountService.registerNewUser(account);
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", e.getMessage());
            return "redirect:/register";
        }
        redirectAttributes.addFlashAttribute("success", "Registration successful! Please log in.");
        return "redirect:/login";
    }

    @GetMapping("/login")
    public String login() {
        return "login";
    }

    @GetMapping("/profile")
    public String profile(Model model, Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return "redirect:/login";
        }

        String email = authentication.getName();
        Account account = accountRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        model.addAttribute("account", account);
        model.addAttribute("hasOrders", false); // Default to false for new users

        return "profile";
    }
}


================================================
File: src/main/java/com/dali/ecommerce/controller/HomeController.java
================================================
package com.dali.ecommerce.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

    @GetMapping("/")
    public String home(Model model) {
        // You can add attributes to the model here to pass data to the view
        // For example: model.addAttribute("products", productService.getFeaturedProducts());
        return "home";
    }
}


================================================
File: src/main/java/com/dali/ecommerce/controller/ProductController.java
================================================
package com.dali.ecommerce.controller;

import com.dali.ecommerce.model.Product;
import com.dali.ecommerce.repository.ProductRepository;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;
import java.util.Optional;

@Controller
public class ProductController {

    private final ProductRepository productRepository;

    public ProductController(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    // This method now ONLY loads the page shell and initial data.
    @GetMapping("/shop")
    public String shop(Model model) {
        // Initial load of all products
        model.addAttribute("products", productRepository.findAll());
        // Load categories for the sidebar
        model.addAttribute("categories", productRepository.findDistinctCategories());
        return "shop";
    }

    // THIS IS THE NEW HTMX-DEDICATED ENDPOINT
    @GetMapping("/shop/products")
    public String searchAndFilterProducts(
            @RequestParam(value = "query", required = false) String query,
            @RequestParam(value = "category", required = false) String category,
            Model model) {

        List<Product> products;
        boolean hasQuery = query != null && !query.trim().isEmpty();
        boolean hasCategory = category != null && !category.trim().isEmpty();

        if (hasQuery && hasCategory) {
            products = productRepository.findByNameContainingIgnoreCaseAndCategory(query, category);
        } else if (hasQuery) {
            products = productRepository.findByNameContainingIgnoreCase(query);
        } else if (hasCategory) {
            products = productRepository.findByCategory(category);
        } else {
            products = productRepository.findAll();
        }

        model.addAttribute("products", products);
        // This tells Thymeleaf to only render the 'product-list-fragment' part of the specified file
        return "fragments/product-list :: product-list-fragment";
    }

    @GetMapping("/product/{id}")
    public String productDetail(@PathVariable("id") Integer id, Model model) {
        Optional<Product> productOptional = productRepository.findById(id);
        if (productOptional.isPresent()) {
            model.addAttribute("product", productOptional.get());
            return "product-detail";
        } else {
            return "redirect:/shop"; // Or a 404 page
        }
    }
}


================================================
File: src/main/java/com/dali/ecommerce/controller/StoreController.java
================================================
package com.dali.ecommerce.controller;

import com.dali.ecommerce.model.Store;
import com.dali.ecommerce.repository.StoreRepository;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Controller
public class StoreController {

    private final StoreRepository storeRepository;

    public StoreController(StoreRepository storeRepository) {
        this.storeRepository = storeRepository;
    }

    // Loads the full page shell with initial data
    @GetMapping("/stores")
    public String showStoresPage(Model model) {
        List<Store> stores = storeRepository.findAll();
        model.addAttribute("stores", stores);
        return "stores";
    }

    // HTMX endpoint for searching stores
    @GetMapping("/stores/search")
    public String searchStores(@RequestParam(value = "query", required = false) String query, Model model) {
        List<Store> stores;
        if (query != null && !query.trim().isEmpty()) {
            stores = storeRepository.findByNameContainingIgnoreCaseOrLocationContainingIgnoreCase(query, query);
        } else {
            stores = storeRepository.findAll();
        }
        model.addAttribute("stores", stores);
        return "fragments/store-list :: store-list-fragment";
    }
}


================================================
File: src/main/java/com/dali/ecommerce/model/Account.java
================================================
package com.dali.ecommerce.model;

import jakarta.persistence.*;
import java.util.List;

@Entity
@Table(name = "accounts")
public class Account {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "account_id")
    private Integer accountId;

    @Column(name = "account_first_name")
    private String firstName;

    @Column(name = "account_last_name")
    private String lastName;

    @Column(name = "account_email", nullable = false, unique = true)
    private String email;

    @Column(name = "password_hash", nullable = false)
    private String passwordHash;

    @Column(name = "phone_number")
    private String phoneNumber;

    @OneToMany(mappedBy = "account", fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @OrderBy("isDefault DESC, addressId ASC")
    private List<Address> addresses;

    // Getters and Setters
    public Integer getAccountId() { return accountId; }
    public void setAccountId(Integer accountId) { this.accountId = accountId; }
    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }
    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public String getPasswordHash() { return passwordHash; }
    public void setPasswordHash(String passwordHash) { this.passwordHash = passwordHash; }
    public String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(String phoneNumber) { this.phoneNumber = phoneNumber; }
    public List<Address> getAddresses() { return addresses; }
    public void setAddresses(List<Address> addresses) { this.addresses = addresses; }

    public String getFullName() {
        return firstName + " " + lastName;
    }
}


================================================
File: src/main/java/com/dali/ecommerce/model/Address.java
================================================
package com.dali.ecommerce.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "addresses")
public class Address {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "address_id")
    private Integer addressId;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "account_id", nullable = false)
    private Account account;

    @Column(name = "province")
    private String province;

    @Column(name = "city")
    private String city;

    @Column(name = "barangay")
    private String barangay;

    @Column(name = "additional_info")
    private String additionalInfo;

    @Column(name = "phone_number")
    private String phoneNumber;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "is_default")
    private boolean isDefault;

    // Getters and Setters
    public Integer getAddressId() { return addressId; }
    public void setAddressId(Integer addressId) { this.addressId = addressId; }
    public Account getAccount() { return account; }
    public void setAccount(Account account) { this.account = account; }
    public String getProvince() { return province; }
    public void setProvince(String province) { this.province = province; }
    public String getCity() { return city; }
    public void setCity(String city) { this.city = city; }
    public String getBarangay() { return barangay; }
    public void setBarangay(String barangay) { this.barangay = barangay; }
    public String getAdditionalInfo() { return additionalInfo; }
    public void setAdditionalInfo(String additionalInfo) { this.additionalInfo = additionalInfo; }
    public String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(String phoneNumber) { this.phoneNumber = phoneNumber; }
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    public boolean isDefault() { return isDefault; }
    public void setDefault(boolean isDefault) { this.isDefault = isDefault; }

    public String getFullAddress() {
        return String.join(", ", additionalInfo, barangay, city, province);
    }
}


================================================
File: src/main/java/com/dali/ecommerce/model/Product.java
================================================
package com.dali.ecommerce.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import java.text.NumberFormat;
import java.util.Locale;

@Entity
@Table(name = "products")
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "product_id")
    private Integer id;

    @Column(name = "product_name", nullable = false)
    private String name;

    @Column(name = "product_description", length = 1024)
    private String description;

    @Column(name = "product_price", nullable = false)
    private Double price;

    @Column(name = "product_category")
    private String category;

    @Column(name = "product_quantity", nullable = false)
    private Integer productQuantity;

    @Column(name = "image")
    private String image; // Stores the image filename, e.g., "pork-shoulder.png"


    // Constructors
    public Product() {
    }

    // Getters and Setters (No Lombok)
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public Integer getProductQuantity() {
        return productQuantity;
    }

    public void setProductQuantity(Integer productQuantity) {
        this.productQuantity = productQuantity;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    // Helper method for display
    public String getFormattedPrice() {
        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("en", "PH"));
        return currencyFormat.format(this.price);
    }
}


================================================
File: src/main/java/com/dali/ecommerce/model/Store.java
================================================
package com.dali.ecommerce.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "stores")
public class Store {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "store_id")
    private Integer id;

    @Column(name = "store_name", nullable = false)
    private String name;

    @Column(name = "store_location")
    private String location;

    // Constructors
    public Store() {
    }

    public Store(String name, String location) {
        this.name = name;
        this.location = location;
    }

    // Getters and Setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    @Override
    public String toString() {
        return "Store{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", location='" + location + '\'' +
                '}';
    }
}


================================================
File: src/main/java/com/dali/ecommerce/repository/AccountRepository.java
================================================
package com.dali.ecommerce.repository;

import com.dali.ecommerce.model.Account;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface AccountRepository extends JpaRepository<Account, Integer> {
    Optional<Account> findByEmail(String email);
}


================================================
File: src/main/java/com/dali/ecommerce/repository/AddressRepository.java
================================================
package com.dali.ecommerce.repository;

import com.dali.ecommerce.model.Address;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface AddressRepository extends JpaRepository<Address, Integer> {
}


================================================
File: src/main/java/com/dali/ecommerce/repository/ProductRepository.java
================================================
package com.dali.ecommerce.repository;

import com.dali.ecommerce.model.Product;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ProductRepository extends JpaRepository<Product, Integer> {

    List<Product> findByCategory(String category);

    // Add this for the search bar
    List<Product> findByNameContainingIgnoreCase(String name);

    // Add this for combined search + category filter
    List<Product> findByNameContainingIgnoreCaseAndCategory(String name, String category);

    @Query("SELECT DISTINCT p.category FROM Product p ORDER BY p.category ASC")
    List<String> findDistinctCategories();
}


================================================
File: src/main/java/com/dali/ecommerce/repository/StoreRepository.java
================================================
package com.dali.ecommerce.repository;

import com.dali.ecommerce.model.Store;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface StoreRepository extends JpaRepository<Store, Integer> {

    // Add this for searching
    List<Store> findByNameContainingIgnoreCaseOrLocationContainingIgnoreCase(String name, String location);
}


================================================
File: src/main/java/com/dali/ecommerce/service/AccountService.java
================================================
package com.dali.ecommerce.service;

import com.dali.ecommerce.model.Account;

public interface AccountService {
    Account registerNewUser(Account account) throws Exception;
}


================================================
File: src/main/java/com/dali/ecommerce/service/AccountServiceImpl.java
================================================
package com.dali.ecommerce.service;

import com.dali.ecommerce.model.Account;
import com.dali.ecommerce.repository.AccountRepository;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class AccountServiceImpl implements AccountService {

    private final AccountRepository accountRepository;
    private final PasswordEncoder passwordEncoder;

    public AccountServiceImpl(AccountRepository accountRepository, PasswordEncoder passwordEncoder) {
        this.accountRepository = accountRepository;
        this.passwordEncoder = passwordEncoder;
    }

    @Override
    public Account registerNewUser(Account account) throws Exception {
        if (accountRepository.findByEmail(account.getEmail()).isPresent()) {
            throw new Exception("There is already an account with that email address: " + account.getEmail());
        }
        // Encode the raw password before saving
        account.setPasswordHash(passwordEncoder.encode(account.getPasswordHash()));
        return accountRepository.save(account);
    }
}


================================================
File: src/main/java/com/dali/ecommerce/service/CustomUserDetailsService.java
================================================
package com.dali.ecommerce.service;

import com.dali.ecommerce.model.Account;
import com.dali.ecommerce.repository.AccountRepository;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.ArrayList;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    private final AccountRepository accountRepository;

    public CustomUserDetailsService(AccountRepository accountRepository) {
        this.accountRepository = accountRepository;
    }

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        Account account = accountRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with email: " + email));

        return new User(account.getEmail(), account.getPasswordHash(), new ArrayList<>());
    }
}


================================================
File: src/main/resources/application.properties
================================================
# Application Name
spring.application.name=DALI

# PostgreSQL Database Configuration
# Replace 'your_username' and 'your_password' with your PostgreSQL credentials.
# Make sure you have a database named 'dali_db' created.
# Run set DB_PASSWORD=your_secret_password
spring.datasource.url=jdbc:postgresql://localhost:5432/dali_db
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver


# JPA/Hibernate Configuration
# 'update' will create/update the database schema automatically based on your entities.
# Use 'validate' in production.
spring.jpa.hibernate.ddl-auto=none
# Show SQL queries in the console for debugging.
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Thymeleaf Configuration
spring.thymeleaf.cache=false

# --- SQL Initialization ---
# Always initialize the database on startup.
spring.sql.init.mode=always


================================================
File: src/main/resources/data.sql
================================================
-- This script seeds the database with initial data.
-- It is run automatically by Spring Boot on application startup.

-- =================================================================
--  Seed the 'stores' table
-- =================================================================
INSERT INTO stores (store_name, store_location) VALUES
                                                    ('DALI Everyday Grocery - Pureza', 'Pureza, Sampaloc, City Of Manila'),
                                                    ('DALI Convenience Store - Katipunan', 'Katipunan Ave, Quezon City'),
                                                    ('DALI Supermart - Makati CBD', 'Ayala Avenue, Makati City');


-- =================================================================
--  Seed the 'products' table
-- =================================================================
INSERT INTO products (product_name, product_description, product_price, product_category, product_quantity, image) VALUES
                                                                                                                       ('Frozen Pork Shoulder 500g', 'Versatile and affordable choice for your everyday meals. Perfect for classic dishes like adobo, sinigang, or hearty stews. Tender, flavorful, and conveniently packed.', 199.00, 'Pork', 55, 'frozen-pork-shoulder.png'),
                                                                                                                       ('Beef Cubes for Stew 500g', 'Ideal for slow-cooking, caldereta, or mechado. These tender beef cubes will make your stews rich and flavorful.', 280.00, 'Beef', 40, 'beef-cubes.png'),
                                                                                                                       ('Pork Liempo (Belly) 500g', 'The perfect cut for grilling or frying to a crispy perfection. Marinate it for an unforgettable inihaw na liempo.', 225.50, 'Pork', 75, 'pork-liempo.png'),
                                                                                                                       ('Fresh Chicken Drumsticks 1kg', 'Juicy and meaty, perfect for your favorite fried chicken recipe, grilling, or tinola. A family favorite.', 250.00, 'Chicken', 80, 'chicken-drumstick.png'),
                                                                                                                       ('Choice Ground Beef 500g', 'Versatile ground beef for making burgers, spaghetti sauce, or picadillo. Lean and full of flavor.', 275.00, 'Beef', 60, 'ground-beef.png'),
                                                                                                                       ('Whole Dressed Chicken (1.2kg)', 'A whole chicken ready for roasting, lechon manok style, or for a hearty chicken soup. A versatile centerpiece for any meal.', 290.00, 'Chicken', 30, 'whole-chicken.png');


================================================
File: src/main/resources/schema.sql
================================================
-- Drop tables if they exist to ensure a clean slate on each run.
-- This is useful for development.
DROP TABLE IF EXISTS addresses CASCADE;
DROP TABLE IF EXISTS accounts CASCADE;
DROP TABLE IF EXISTS products CASCADE;
DROP TABLE IF EXISTS stores CASCADE;

-- Create the 'stores' table
CREATE TABLE stores (
                        store_id        SERIAL PRIMARY KEY,
                        store_name      VARCHAR(255) NOT NULL,
                        store_location  VARCHAR(255)
);

-- Create the 'products' table
CREATE TABLE products (
                          product_id          SERIAL PRIMARY KEY,
                          product_name        VARCHAR(255) NOT NULL,
                          product_description TEXT,
                          product_price       NUMERIC(10, 2) NOT NULL, -- Use NUMERIC for currency
                          product_category    VARCHAR(255),
                          product_quantity    INTEGER NOT NULL,
                          image               VARCHAR(255)
);

-- Table 3: accounts
CREATE TABLE accounts (
                          account_id          SERIAL PRIMARY KEY,
                          account_first_name  VARCHAR(255),
                          account_last_name   VARCHAR(255),
                          account_email       VARCHAR(255) UNIQUE NOT NULL,
                          password_hash       VARCHAR(255) NOT NULL,
                          phone_number        VARCHAR(50)
);

-- Table 8: addresses
CREATE TABLE addresses (
                           address_id      SERIAL PRIMARY KEY,
                           account_id      INTEGER NOT NULL REFERENCES accounts(account_id),
                           province        VARCHAR(255),
                           city            VARCHAR(255),
                           barangay        VARCHAR(255),
                           additional_info VARCHAR(1024),
                           phone_number    VARCHAR(50),
                           created_at      TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                           is_default      BOOLEAN DEFAULT FALSE
);


================================================
File: src/main/resources/static/css/style.css
================================================
/* =================================
   1. Basic Reset and Global Styles
   ================================= */
body, h1, h2, h3, h4, p, a {
    margin: 0;
    padding: 0;
    font-family: 'Poppins', sans-serif;
    color: #333;
}

body {
    background-color: #f9f9f9;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

/* =================================
   2. Reusable Components (Header, Footer, Buttons)
   ================================= */
.header {
    background-color: #fff;
    padding: 20px 0;
    border-bottom: 1px solid #eee;
}

.header .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.nav a, .header-actions a {
    margin-left: 20px;
    text-decoration: none;
    color: #555;
    font-weight: 600;
}

.footer {
    background-color: #333;
    color: #fff;
    text-align: center;
    padding: 20px 0;
}

.footer p {
    color: #fff;
}

.btn {
    display: inline-block;
    padding: 12px 25px;
    border-radius: 25px;
    text-decoration: none;
    font-weight: 600;
    margin-right: 10px;
    border: none;
    cursor: pointer;
}

.btn-primary {
    background-color: #b21984;
    color: #fff;
}

.btn-secondary {
    background-color: #fff;
    color: #b21984;
    border: 1px solid #b21984;
}

.btn-disabled {
    padding: 12px 25px;
    border-radius: 8px;
    background-color: #e9ecef;
    color: #6c757d;
    border: 1px solid #ced4da;
    cursor: not-allowed;
}

/* =================================
   3. Homepage Specific Styles
   ================================= */
.hero-section {
    background: linear-gradient(to right, #fff, #fdeff5);
    padding: 60px 0;
}

.hero-section .container {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.hero-content {
    max-width: 50%;
}

.hero-content h1 {
    font-size: 4rem;
    color: #555;
    line-height: 1.1;
}

.hero-content h1 span {
    color: #b21984;
    font-weight: 700;
}

.hero-content p {
    margin: 20px 0;
    font-size: 1.1rem;
    color: #666;
}

.hero-image img {
    max-width: 450px;
}

.product-range-section {
    padding: 80px 0;
    text-align: center;
}

.product-range-section h2 {
    font-size: 2.5rem;
    color: #b21984;
}

.section-subtitle {
    margin-bottom: 40px;
    color: #666;
}

.category-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 30px;
    text-align: left;
}

.category-card {
    background-color: #fff;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.05);
}

.category-card h3 {
    color: #333;
    margin-bottom: 10px;
}

.category-card p {
    color: #777;
    margin-bottom: 20px;
}

.category-card a {
    color: #b21984;
    text-decoration: none;
    font-weight: 600;
}

.why-choose-us-section {
    padding: 80px 0;
    background-color: #fff;
}

.why-choose-us-section .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 50px;
}

.features-list, .why-choose-us-text {
    flex: 1;
}

.features-list h3 {
    font-size: 2.5rem;
    color: #333;
    margin-bottom: 30px;
}

.feature-item {
    background-color: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 15px;
    border-left: 4px solid #b21984;
}

.why-choose-us-text h2 {
    font-size: 2.5rem;
    color: #b21984;
    margin-bottom: 20px;
}


/* =================================
   4. Store Finder Page Styles
   ================================= */
.store-finder-container {
    display: flex;
    min-height: calc(100vh - 81px - 61px);
}

.store-list-panel {
    width: 450px;
    padding: 40px;
    background-color: #fff;
    overflow-y: auto;
    border-right: 1px solid #e0e0e0;
}

.store-list-panel h1 {
    font-size: 2.2rem;
    color: #b21984;
}

.search-bar {
    margin: 20px 0;
}

.search-bar input {
    width: 100%;
    padding: 15px;
    font-size: 1rem;
    border-radius: 30px;
    border: 1px solid #ccc;
    box-sizing: border-box;
}

.store-count {
    font-weight: 600;
    margin-bottom: 10px;
    color: #555;
}

.store-item {
    padding: 20px 0;
    border-bottom: 1px solid #eee;
}

.store-item h3 {
    font-size: 1.1rem;
    font-weight: 700;
}

.store-item p {
    color: #666;
    margin-top: 5px;
}

.store-status .status-open {
    color: #28a745;
    font-weight: 600;
}

.view-all-stores {
    display: block;
    text-align: center;
    margin-top: 20px;
    font-weight: 600;
    color: #333;
}

.map-panel {
    flex-grow: 1;
    background-color: #e9e9e9;
}


/* =================================
   5. Shop Page & HTMX Search Styles
   ================================= */
.search-banner {
    background-color: #b21984;
    padding: 60px 20px;
    text-align: center;
}

.search-banner h2 {
    font-size: 2.5rem;
    color: #ccc;
    font-weight: 600;
    margin-bottom: 20px;
}

.main-search-input {
    width: 100%;
    max-width: 600px;
    padding: 15px 20px;
    font-size: 1.1rem;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.shop-container {
    display: flex;
    padding-top: 40px;
    padding-bottom: 40px;
    gap: 30px;
    align-items: flex-start;
}

.filter-sidebar {
    width: 250px;
    flex-shrink: 0;
}

.filter-sidebar h4 {
    font-size: 1.5rem;
    margin-bottom: 20px;
}
.filter-sidebar h5 {
    font-size: 0.8rem;
    font-weight: 700;
    color: #888;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-bottom: 15px;
}

.filter-sidebar ul {
    list-style: none;
    padding: 0;
}

/* START: Updated styles for category filter */
.filter-sidebar ul li input[type="radio"] {
    display: none; /* Hide the actual radio button */
}

.filter-sidebar ul li label {
    text-decoration: none;
    color: #333;
    display: block;
    padding: 8px 0;
    font-size: 0.9rem;
    cursor: pointer;
    transition: color 0.2s;
}

.filter-sidebar ul li label:hover {
    color: #b21984; /* Use theme color for hover */
}

.filter-sidebar ul li input[type="radio"]:checked + label {
    color: #b21984; /* Use theme color for selected */
    font-weight: 700;
}
/* END: Updated styles for category filter */


.product-grid-container {
    flex-grow: 1;
}

.product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    gap: 30px;
}

.product-card {
    background-color: #fff;
    border: 1px solid #eee;
    text-align: left;
    display: flex;
    flex-direction: column;
}

.product-card a {
    text-decoration: none;
    color: inherit;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
}

.product-image-container {
    height: 220px;
    padding: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #fff;
}

.product-card img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
}

.product-card-info {
    padding: 20px;
    border-top: 1px solid #eee;
}

.product-card-category {
    font-size: 0.75rem;
    text-transform: uppercase;
    color: #888;
    margin-bottom: 5px;
    font-weight: 600;
}

.product-card-name {
    font-size: 1rem;
    font-weight: 600;
    color: #333;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    height: 2.4em;
    line-height: 1.2;
    margin-bottom: 10px;
}

.product-price {
    font-size: 1.2rem;
    font-weight: 700;
    color: #333;
}

/* =================================
   6. Product Detail Page Styles
   ================================= */
.product-detail-container {
    display: flex;
    gap: 50px;
    padding-top: 50px;
    padding-bottom: 50px;
    min-height: calc(100vh - 81px - 61px); /* Ensures content area fills the screen, pushing footer down */
}

/* =================================
   7. Authentication Page Styles (NEW)
   ================================= */
.auth-page-wrapper {
    background-color: #b21984;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: 40px 20px;
    box-sizing: border-box;
}

.auth-card {
    display: flex;
    max-width: 960px;
    width: 100%;
    background-color: #fff;
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.auth-image-panel {
    flex: 1;
    background-color: #fce9d3;
    padding: 40px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    box-sizing: border-box;
}

.auth-image-panel img {
    max-width: 80%;
    margin-top: 30px;
}

.back-to-shop-btn {
    align-self: flex-start;
    display: inline-flex;
    align-items: center;
    padding: 10px 20px;
    border-radius: 20px;
    background-color: #fff;
    border: 1px solid #eee;
    text-decoration: none;
    color: #333;
    font-weight: 600;
    transition: background-color 0.2s;
}

.back-to-shop-btn:hover {
    background-color: #f8f8f8;
}

.auth-form-panel {
    flex: 1;
    padding: 25px 60px;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.auth-form-panel h2 {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 10px;
}

.auth-form-panel .sub-heading {
    color: #666;
    margin-bottom: 30px;
}

.auth-form-panel .sub-heading a {
    color: #b21984;
    font-weight: 600;
    text-decoration: none;
}

.auth-form-panel .form-group {
    margin-bottom: 20px;
}

.auth-form-panel label {
    display: block;
    font-size: 0.9rem;
    color: #555;
    margin-bottom: 8px;
    font-weight: 600;
}

.auth-form-panel input {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #ccc;
    border-radius: 8px;
    box-sizing: border-box;
    font-size: 1rem;
}

.auth-form-panel input:focus {
    outline: none;
    border-color: #b21984;
    box-shadow: 0 0 0 2px rgba(178, 25, 132, 0.2);
}

.auth-btn {
    width: 100%;
    padding: 15px;
    border: none;
    background-color: #b21984;
    color: #fff;
    font-size: 1rem;
    font-weight: 600;
    border-radius: 8px;
    cursor: pointer;
    margin-top: 10px;
    transition: background-color 0.2s;
}

.auth-btn:hover {
    background-color: #9e1673;
}

.forgot-password-link {
    display: block;
    text-align: right;
    font-size: 0.9rem;
    color: #555;
    text-decoration: none;
    margin-top: -10px;
    margin-bottom: 20px;
}

.or-separator {
    text-align: center;
    margin: 30px 0;
    color: #aaa;
    position: relative;
}
.or-separator::before,
.or-separator::after {
    content: '';
    position: absolute;
    top: 50%;
    width: 40%;
    height: 1px;
    background-color: #ddd;
}
.or-separator::before { left: 0; }
.or-separator::after { right: 0; }


.switch-auth-link {
    text-align: center;
    margin-top: 30px;
    color: #555;
}

.switch-auth-link a {
    color: #b21984;
    font-weight: 700;
    text-decoration: none;
}

.auth-error { color: #dc3545; background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 10px; border-radius: 5px; margin-bottom: 20px; text-align: center; font-size: 0.9rem; }
.auth-success { color: #155724; background-color: #d4edda; border-color: #c3e6cb; padding: 10px; border-radius: 5px; margin-bottom: 20px; text-align: center; font-size: 0.9rem; }

/* The personal information label for sign up page */
.form-section-label {
    font-weight: 700;
    color: #333;
    margin-bottom: 15px;
    display: block;
}



================================================
File: src/main/resources/templates/home.html
================================================
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DALI Online Grocery</title>
    <link rel="stylesheet" th:href="@{/css/style.css}">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
</head>
<body>

<header class="header" th:replace="~{fragments/header :: header}"></header>

<main>
    <section class="hero-section">
        <div class="container">
            <div class="hero-content">
                <h1>Mas mura sa <br><span>DALI</span></h1>
                <p>
                    DALI is an online grocery store where convenience meets quality and affordability.
                    Value for money is our passion, and we will never compromise on the freshness of products or their variety.
                </p>
                <div class="hero-buttons">
                    <a href="#" class="btn btn-primary">Shop now</a>
                    <a href="#" class="btn btn-secondary">Learn more</a>
                </div>
            </div>
            <div class="hero-image">
                <img th:src="@{/images/grocery-bag.png}" alt="Grocery Bag with Vegetables">
            </div>
        </div>
    </section>

    <section class="product-range-section">
        <div class="container">
            <h2>Discover DALI's Wide Product Range</h2>
            <p class="section-subtitle">Find everything you need in one place â€” from fresh produce to pantry staples, quality meats, and more.</p>
            <div class="category-grid">
                <div class="category-card">
                    <h3>Frozen Meat</h3>
                    <p>Quality cuts, kept fresh and ready to cook.</p>
                </div>
                <div class="category-card">
                    <h3>Food Staples</h3>
                    <p>Your everyday essentials for hearty, home-cooked meals.</p>
                </div>
                <div class="category-card">
                    <h3>Health and Beauty</h3>
                    <p>Care for yourself, inside and out.</p>
                </div>
                <div class="category-card">
                    <h3>Other Grocery Products</h3>
                    <p>All the additional essentials you need.</p>
                </div>
            </div>
        </div>
    </section>

    <section class="why-choose-us-section">
        <div class="container">
            <div class="features-list">
                <h3>Why Choose Us</h3>
                <div class="feature-item">
                    <h4>Convenience at Your Fingertips</h4>
                    <p>DALI brings the store closer to you, with flexible delivery or convenient in-store pickup.</p>
                </div>
                <div class="feature-item">
                    <h4>Quality You Can Trust</h4>
                    <p>We select only the best products from trusted suppliers, so you'll be assured of getting only the best.</p>
                </div>
                <div class="feature-item">
                    <h4>Exceptional Customer Support</h4>
                    <p>Our customer support team will assist you with your queries, concerns, or anything else.</p>
                </div>
            </div>
            <div class="why-choose-us-text">
                <h2>Elevate Your Shopping Journey</h2>
                <p>DALI is not just another grocery store-it is a shopping experience, convenient, trustworthy, and very tailored to make your life easy. We have high-quality products available at flexible delivery options, an easy-to-use platform, and really great service to offer peace of mind and satisfaction in every order with us.</p>
            </div>
        </div>
    </section>
</main>

<footer class="footer" th:replace="~{fragments/footer :: footer}"></footer>

</body>
</html>


================================================
File: src/main/resources/templates/login.html
================================================
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - DALI</title>
    <link rel="stylesheet" th:href="@{/css/style.css}">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
</head>
<body>

<div class="auth-page-wrapper">
    <div class="auth-card">
        <!-- Image Panel -->
        <div class="auth-image-panel">
            <a th:href="@{/shop}" class="back-to-shop-btn">
                <span><</span> Â  Back to shop
            </a>
            <img th:src="@{/images/login.png}" alt="Shopping cart with groceries">
        </div>

        <!-- Form Panel -->
        <div class="auth-form-panel">
            <h2>Login</h2>

            <div th:if="${param.error}" class="auth-error">
                Invalid email or password.
            </div>
            <div th:if="${success}" class="auth-success" th:text="${success}">
                Registration successful!
            </div>

            <form th:action="@{/login}" method="post">
                <div class="form-group">
                    <label for="username">Email</label>
                    <input type="text" id="username" name="username" required autofocus>
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" id="password" name="password" required>
                </div>
                <a href="#" class="forgot-password-link">Forgot Password?</a>
                <button type="submit" class="auth-btn">Login</button>
            </form>

            <div class="or-separator">OR</div>

            <!-- Removed Social Media Buttons as per request -->

            <div class="switch-auth-link">
                Don't have an account? <a th:href="@{/register}">Sign up</a>
            </div>
        </div>
    </div>
</div>

</body>
</html>


================================================
File: src/main/resources/templates/product-detail.html
================================================
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title th:text="${product.name} + ' - DALI'">Product Detail - DALI</title>
    <link rel="stylesheet" th:href="@{/css/style.css}">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
</head>
<body>

<header class="header" th:replace="~{fragments/header :: header}"></header>

<main class="product-detail-container container" th:object="${product}">
    <div class="product-detail-image">
        <img th:src="@{'/images/products/' + *{image}}" th:alt="*{name}">
    </div>
    <div class="product-detail-info">
        <h1 th:text="*{name}">Frozen Pork Shoulder 500g</h1>
        <p class="product-detail-price" th:text="*{getFormattedPrice()}">â‚± 199</p>

        <div class="product-actions">
            <!-- Quantity selector can be added here later -->
            <button th:if="*{productQuantity > 0}" class="btn btn-primary btn-large">Add to Cart</button>
            <button th:if="*{productQuantity <= 0}" class="btn btn-disabled btn-large" disabled>Out of Stock</button>
        </div>

        <div class="product-description">
            <h3>Description</h3>
            <p th:text="*{description}">
                Versatile and affordable choice for your everyday meals. Our pre-cut Frozen Pork Shoulder is perfect for classic dishes like adobo, sinigang, or hearty stews. Tender, flavorful, and conveniently packed to save you time in the kitchen.
            </p>
        </div>
    </div>
</main>

<footer class="footer" th:replace="~{fragments/footer :: footer}"></footer>

</body>
</html>


================================================
File: src/main/resources/templates/profile.html
================================================
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>My Account - DALI</title>
    <link rel="stylesheet" th:href="@{/css/style.css}">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        .profile-page { background-color: #f7f3f6; min-height: calc(100vh - 81px - 61px); padding: 50px 0; }
        .profile-page .container { max-width: 900px; }
        .profile-header h1 { font-size: 2rem; color: #b21984; font-weight: 700; }
        .profile-header { display: flex; align-items: center; justify-content: space-between; margin-bottom: 30px; }
        .profile-section { background: #fff; border-radius: 8px; padding: 30px; margin-bottom: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.05); }
        .section-header { display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #eee; padding-bottom: 15px; margin-bottom: 20px; }
        .section-header h2 { font-size: 1.5rem; color: #333; }
        .edit-link { color: #b21984; text-decoration: none; font-weight: 600; }
        .details-grid { display: grid; grid-template-columns: 150px 1fr; gap: 10px; color: #555; }
        .details-grid dt { font-weight: 600; color: #888; }
        .address-box { border: 1px solid #eee; padding: 20px; border-radius: 5px; margin-bottom: 15px; }
        .address-box p { margin: 0 0 5px; }
        .address-tags span { display: inline-block; padding: 4px 10px; font-size: 0.75rem; border-radius: 15px; margin-right: 10px; font-weight: 600; }
        .tag-home { background-color: #e9ecef; color: #495057; }
        .tag-default { border: 1px solid #b21984; color: #b21984; background-color: #fff; }
        .order-card { border: 1px solid #ddd; border-radius: 8px; margin-bottom: 20px; overflow: hidden; }
        .order-header { background-color: #f8f9fa; padding: 15px 20px; display: flex; justify-content: space-between; align-items: center; }
        .order-header-info { font-weight: 600; }
        .order-body { padding: 20px; }
        .order-footer { padding: 15px 20px; text-align: right; }
        .btn-track { background-color: #b21984; color: #fff; padding: 10px 25px; border-radius: 5px; text-decoration: none; }
    </style>
</head>
<body>
<header class="header" th:replace="~{fragments/header :: header}"></header>

<main class="profile-page">
    <div class="container" th:if="${account}">
        <div class="profile-header">
            <div>
                <p>Hello,</p>
                <h1 th:text="${account.getFullName()}">Duncan Bandojo</h1>
            </div>
        </div>

        <!-- Personal Details Section -->
        <section class="profile-section">
            <div class="section-header">
                <h2>Personal details</h2>
                <a href="#" class="edit-link">Edit</a>
            </div>
            <dl class="details-grid">
                <dt>First Name:</dt> <dd th:text="${account.firstName}">Duncan</dd>
                <dt>Last Name:</dt> <dd th:text="${account.lastName}">Bandojo</dd>
                <dt>Phone Number:</dt> <dd th:text="${account.phoneNumber}">09123456789</dd>
                <dt>Email:</dt> <dd th:text="${account.email}">duncanbandojo@gmail.com</dd>
            </dl>
        </section>

        <!-- Address Section -->
        <section class="profile-section">
            <div class="section-header">
                <h2>Address</h2>
                <a href="#" class="edit-link">Edit</a>
            </div>
            <div th:each="address : ${account.addresses}" class="address-box">
                <p th:text="${address.phoneNumber}">09123456789</p>
                <p th:text="${address.getFullAddress()}">Unit 4B Greenfield Residences, ...</p>
                <div class="address-tags">
                    <span class="tag-home">HOME</span>
                    <span th:if="${address.isDefault()}" class="tag-default">Default Address</span>
                </div>
            </div>
            <a href="#" class="edit-link" style="margin-top: 10px; display: inline-block;">Add new address</a>
        </section>

        <!-- Orders Section -->
        <section class="profile-section">
            <div class="section-header">
                <h2>Orders</h2>
            </div>
            <div th:if="${hasOrders}">
                <div class="order-card">
                    <div class="order-header">
                        <span class="order-header-info">Sta. Mesa â€¢ DALI Online</span>
                        <span>Friday, October 8, 2025</span>
                    </div>
                    <div class="order-body">
                        <p>3 products</p>
                        <p>Total: <strong>â‚±750</strong></p>
                    </div>
                    <div class="order-footer">
                        <a href="#" class="btn-track">Track Order</a>
                    </div>
                </div>
            </div>
            <div th:if="!${hasOrders}">
                <p>You have no orders yet.</p>
            </div>
        </section>
    </div>
</main>

<footer class="footer" th:replace="~{fragments/footer :: footer}"></footer>
</body>
</html>


================================================
File: src/main/resources/templates/register.html
================================================
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up - DALI</title>
    <link rel="stylesheet" th:href="@{/css/style.css}">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
</head>
<body>

<div class="auth-page-wrapper">
    <div class="auth-card">
        <!-- Image Panel -->
        <div class="auth-image-panel">
            <a th:href="@{/shop}" class="back-to-shop-btn">
                <span><</span> Â  Back to shop
            </a>
            <img th:src="@{/images/login.png}" alt="Shopping cart with groceries">
        </div>

        <!-- Form Panel -->
        <div class="auth-form-panel">
            <h2>Sign up</h2>
            <p class="sub-heading">
                <br>Already have account? <a th:href="@{/login}">Login here</a>
            </p>

            <div th:if="${error}" class="auth-error" th:text="${error}">
                Error message will go here.
            </div>

            <form th:action="@{/register}" th:object="${account}" method="post">
                <span class="form-section-label">Personal Information</span>
                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <input type="text" id="firstName" th:field="*{firstName}" required>
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <input type="text" id="lastName" th:field="*{lastName}" required>
                </div>
                <div class="form-group">
                    <label for="phoneNumber">Phone number</label>
                    <input type="tel" id="phoneNumber" th:field="*{phoneNumber}" placeholder="PH (+63)">
                </div>
                <div class="form-group">
                    <label for="email">Email Address</label>
                    <input type="email" id="email" th:field="*{email}" required>
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" id="password" th:field="*{passwordHash}" required>
                </div>
                <button type="submit" class="auth-btn">Next</button>
            </form>
        </div>
    </div>
</div>

</body>
</html>


================================================
File: src/main/resources/templates/shop.html
================================================
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shop - DALI</title>
    <script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.5/dist/htmx.min.js"></script>
    <link rel="stylesheet" th:href="@{/css/style.css}">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
</head>
<body>

<header class="header" th:replace="~{fragments/header :: header}"></header>

<!-- The form now controls the HTMX requests for both search and filtering -->
<form class="shop-container container"
      hx-get="/shop/products"
      hx-trigger="keyup changed delay:200ms from:#search-input, change from:[name='category']"
      hx-target="#product-grid-results"
      hx-swap="innerHTML">

    <!-- Filter Sidebar -->
    <aside class="filter-sidebar">
        <h4>Filters</h4>
        <div class="filter-group">
            <h5>CATEGORY</h5>
            <!-- We now use radio buttons for filtering. They are semantically correct and work great with HTMX -->
            <ul>
                <!-- "All" option -->
                <li>
                    <input type="radio" name="category" value="" id="cat-all" checked="checked">
                    <label for="cat-all">All</label>
                </li>
                <!-- Category options from the model -->
                <li th:each="cat, iterStat : ${categories}">
                    <input type="radio" name="category" th:value="${cat}" th:id="'cat-' + ${iterStat.index}">
                    <label th:for="'cat-' + ${iterStat.index}" th:text="${cat}">Category Name</label>
                </li>
            </ul>
        </div>
    </aside>

    <!-- Main Content Area -->
    <main class="product-grid-container">
        <section class="search-banner">
            <!-- The search input is now just a standard input. The form handles the HTMX. -->
            <input type="search"
                   id="search-input"
                   name="query"
                   class="main-search-input"
                   placeholder="Search products..."
            >
        </section>

        <!-- Product Grid Results -->
        <div id="product-grid-results">
            <!-- The initial product list is loaded via a fragment -->
            <div th:replace="~{fragments/product-list :: product-list-fragment}"></div>
        </div>
    </main>
</form>

<footer class="footer" th:replace="~{fragments/footer :: footer}"></footer>

</body>
</html>


================================================
File: src/main/resources/templates/stores.html
================================================
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Find a DALI Store</title>
    <script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.5/dist/htmx.min.js"></script>
    <link rel="stylesheet" th:href="@{/css/style.css}">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
</head>
<body>

<header class="header" th:replace="~{fragments/header :: header}"></header>

<main class="store-finder-container">
    <div class="store-list-panel">
        <h1>Find a DALI Store</h1>
        <div class="search-bar">
            <input type="search"
                   name="query"
                   placeholder="Search store name or location..."
                   hx-get="/stores/search"
                   hx-trigger="keyup changed delay:200ms"
                   hx-target="#store-list-results"
                   hx-swap="innerHTML"
            >
        </div>

        <!-- This div is the target for HTMX updates -->
        <div id="store-list-results">
            <!-- Load the initial list via fragment -->
            <div th:replace="~{fragments/store-list :: store-list-fragment}"></div>
        </div>

    </div>
    <div class="map-panel">
        <!-- Placeholder for the map -->
        <img th:src="@{/images/map-placeholder.png}" alt="Map of stores" style="width: 100%; height: 100%; object-fit: cover;">
    </div>
</main>

<footer class="footer" th:replace="~{fragments/footer :: footer}"></footer>

</body>
</html>


================================================
File: src/main/resources/templates/fragments/footer.html
================================================
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<body>
<footer class="footer" th:fragment="footer">
    <div class="container">
        <p>Â© 2025 DALI Online. All rights reserved.</p>
    </div>
</footer>
</body>
</html>


================================================
File: src/main/resources/templates/fragments/header.html
================================================
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org" xmlns:sec="http://www.thymeleaf.org/extras/springsecurity">
<body>
<header class="header" th:fragment="header">
    <div class="container">
        <div class="logo">
            <a th:href="@{/}"><img th:src="@{/images/dali-logo.png}" alt="DALI Logo" style="height: 60px;"/></a>
        </div>
        <nav class="nav">
            <a th:href="@{/shop}">Shop</a>
            <a th:href="@{/stores}">Stores</a>
        </nav>
        <div class="header-actions">
            <a href="#">Cart (0)</a>

            <!-- Not Authenticated -->
            <a sec:authorize="!isAuthenticated()" th:href="@{/login}">Login</a>

            <!-- Authenticated -->
            <a sec:authorize="isAuthenticated()" th:href="@{/profile}">Profile</a>
            <form sec:authorize="isAuthenticated()" th:action="@{/logout}" method="post" style="display: inline;">
                <button type="submit" style="background:none; border:none; padding:0; font-family:inherit; font-size:inherit; cursor:pointer; color:#555; font-weight: 600; margin-left: 20px;">Logout</button>
            </form>
        </div>
    </div>
</header>
</body>
</html>


================================================
File: src/main/resources/templates/fragments/product-list.html
================================================
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<body>

<!-- This is the fragment that will be updated by HTMX -->
<div th:fragment="product-list-fragment" class="product-grid">
    <div th:each="product : ${products}" class="product-card">
        <a th:href="@{/product/{id}(id=${product.id})}">
            <div class="product-image-container">
                <img th:src="@{'/images/products/' + ${product.image}}" th:alt="${product.name}">
            </div>
            <div class="product-card-info">
                <p class="product-card-category" th:text="${product.category}">CATEGORY</p>
                <h3 class="product-card-name" th:text="${product.name}">Product Name</h3>
                <p class="product-price" th:text="${product.getFormattedPrice()}">â‚± 199</p>
            </div>
        </a>
    </div>
</div>

</body>
</html>


================================================
File: src/main/resources/templates/fragments/store-list.html
================================================
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<body>

<div th:fragment="store-list-fragment">
    <p class="store-count" th:text="${stores.size()} + ' Stores found'">3 Stores near you</p>
    <div class="store-list">
        <div th:if="${#lists.isEmpty(stores)}" class="store-item">
            <p>No stores found matching your search.</p>
        </div>
        <div th:each="store : ${stores}" class="store-item">
            <h3 th:text="${store.name}">DALI Everyday Grocery â€“ PUREZA</h3>
            <p th:text="${store.location}">Pureza, Sampaloc, City Of Manila</p>
        </div>
    </div>
</div>

</body>
</html>


================================================
File: src/test/java/com/dali/ecommerce/DaliApplicationTests.java
================================================
package com.dali.ecommerce;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class DaliApplicationTests {

    @Test
    void contextLoads() {
    }

}



================================================
File: .mvn/wrapper/maven-wrapper.properties
================================================
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip


